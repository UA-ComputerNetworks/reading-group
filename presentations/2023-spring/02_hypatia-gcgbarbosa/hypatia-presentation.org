#+OPTIONS: toc:nil reveal_width:1400 reveal_height:1000
#+REVEAL_THEME: black

# Set up the title slide.
# Note the %n at the end to inject speaker notes.
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%s</h2><h3>%A %a</h3><p>View online: <a href="%u">%u</a></p>%n

# Define contents of speaker notes on title slide.
#+REVEAL_TITLE_SLIDE_NOTES: config-title-notes.org

# Configure individual pieces of information.
#+Title: Simulating LEO Networks
#+Subtitle: Learning from Hypatia
#+Author: Beichuan Zhang & George C. G. Barbosa.
#+REVEAL_ACADEMIC_TITLE:
#+REVEAL_TALK_URL: https://gcgbarbosa.com/hypatia
#+REVEAL_TALK_QR_CODE: does not exist
#+OPTIONS: ^:nil

* What is it?
https://github.com/snkas/hypatia

#+ATTR_HTML: :width 50% :height 50%
[[./img/Kuiper_side_view.png]]

#+BEGIN_COMMENT
#+ATTR_HTML: :width 50% :height 50%
[[./img/Telesat_top_view.png]]
#+END_COMMENT

* Brief description

#+ATTR_HTML: :width 100% :height 50%
[[./img/satellites-cones.png]]

** FCC
#+ATTR_HTML: :width 100% :height 100%
[[./img/FCC.png]]

** Constellations
#+ATTR_HTML: :width 100% :height 100%
[[./img/constellations.png]]


* Modules
Hypatia is composed by *four* main modules:

a. ~satgenpy~
b. ~ns3-sat-sim~
c. ~satviz~
d. ~paper~

* (A) satgenpy
Python framework to generate LEO satellite networks and
generate routing over time over a period of time.
- Includes analysis tools to study individual cases.
- Uses several python modules:
    numpy, astropy, ephem, networkx, sgp4, geopy, matplotlib, statsmodels, cartopy
    (and its dependent (data) packages: libproj-dev, proj-data, proj-bin, libgeos-dev), and exputil.

* Using the satgenpy module
What is needed:

1. ground_stations.txt: describing the ground station properties and locations
2. tles.txt: tles describing the orbit of all satelites
3. isls.txt: topology of the inter-satelite links
4. gls_interfaces_info.txt: number of ground-to-sateilte link (GSL) interfaces per each node (both satelites and ground stations)
5. description.txt: descriptive information (in particulr, max ISL/GSL length)
6. dynamic_state/: dynamic state which encompasses (a) forwarding state (fstate) and (b) gsl interface bandwith (gsl_if_bandwith)

* ground_stations.txt
#+BEGIN_EXAMPLE
{
    id: int,
    name: string,
    latitude: float,
    longitude: float,
    elevation: float,
}
#+END_EXAMPLE

Example

#+BEGIN_EXAMPLE
```
0,City: Tokyo; Country: Japan,35.6895,139.69171,0.0
1,City: Delhi; Country: India,28.66667,77.21667,0.0
```
#+END_EXAMPLE

* ground_stations.txt | extended format
There is also a line format for extended (with position): ground_stations.txt

#+BEGIN_EXAMPLE
{
    id: int,
    name: string,
    latitude: float,
    longitude: float,
    elevation: float,
    x cartesian: float,
    y cartesian: float,
    z cartesian: float,
}
#+END_EXAMPLE

example
#+BEGIN_EXAMPLE
0,Tokyo,Japan,37875.951,0.915,35.6895,139.69171,0.0,-3954844.87446858,3354936.24256892,3700264.78797276,0
#+END_EXAMPLE

* tles.txt
- This file contains the position of the satellites.

- the first line should contain the number of orbits and the nubmer of satel  tes per orbit, separated by space
- subsequently, each satellite is describd in four lines:
 (1-3) the first three lines define its orbit using the tle format
- https://en.wikipedia.org/wiki/Two-line_element_set

#+BEGIN_EXAMPLE
```
1 1
Starlink 0
1 00001U 19029BR  18161.59692852  .00001103  00000-0  33518-4 0  9994
2 00001 53.00000   0.7036 0003481 299.7327   0.3331 15.05527065  1773
```
#+END_EXAMPLE
meaning one orbit and one satelite per orbit

#+REVEAL: split

- All satelite should he the same epoch.
- In astronomy, an epoch or reference epoch is a moment in time used as a reference point for some time-varying astronomical quantity.
- It is useful for the celestial coordinates or orbital elements of a celestial body, as they are subject to perturbations and vary with time.

The international space station
#+BEGIN_EXAMPLE
ISS (ZARYA)
1 25544U 98067A   08264.51782528 -.00002182  00000-0 -11606-4 0  2927
2 25544  51.6416 247.4627 0006703 130.5360 325.0288 15.72125391563537
#+END_EXAMPLE

* isls.txt
- This file contains the inter-satellite lines
- These links remain in place for the entire simulation

- Each satellite is described in a line consisting of two `int`,
the ides of the two satellites that share a link.

format:
#+BEGIN_EXAMPLE
```
[from_1] [to_1]
[from_2] [to_2]
...
[from_n][to_n]
```
#+END_EXAMPLE

example:
#+BEGIN_EXAMPLE
example
```
0 1
0 2
1 2
```
#+END_EXAMPLE

* gls_interfaces_info.txt
- This file contains how many GSLs (ground to satelite link) each node has,
and the maximum aggregate bandwith they can have.

format:
#+BEGIN_EXAMPLE
{
    node_id,
    number_of_gsl_interfaces,
    max_agg_bandwidth
}
#+END_EXAMPLE

example:
#+BEGIN_EXAMPLE
```
329,5,2.0
```
#+END_EXAMPLE

which means: node 329 has 5 interfaces which can have an aggregate bandwith of at most 2.0

* description.txt
- This file contains some handy description properties

format:
#+BEGIN_EXAMPLE
```
max_gsl_length_m=<float>
max_isl_length_m=<float>
```
#+END_EXAMPLE

example:
#+BEGIN_EXAMPLE
```
max_gsl_length_m=1089686.0000000000
max_isl_length_m=1000000000.0000000000
```
#+END_EXAMPLE

* dynamic_state/
** forwarding state (fstate)
- This dicrectory contains all the dynamic state, which means state which changes over time
- Each file is named as `fstate_[time_in_nanoseconds].txt`

each file is formated as following
#+BEGIN_EXAMPLE
```
[current, dest, next-hop, current-interface-id, next-hop-interface-id]
[current, dest, next-hop, current-interface-id, next-hop-interface-id]
...
[current, dest, next-hop, current-interface-id, next-hop-interface-id]
```
#+END_EXAMPLE


#+BEGIN_EXAMPLE
```
301,992,340,3,5
```
#+END_EXAMPLE

Which means a packate at node 301 destined for 992 will be sent to 340.
node 301 will nqui it in interface 3 and will send it to the interface 5 of node 340

** gls interface bandwidth
- each file is named as `gsl_if_bandwidth_[time_in_nanoseconds].txt`

#+BEGIN_EXAMPLE
```
[node, interface-id, bandwidth (unitless)]
[node, interface-id, bandwidth (unitless)]
...
[node, interface-id, bandwidth (unitless)]
```
#+END_EXAMPLE

Example:
#+BEGIN_EXAMPLE
```
145,1,0.4
```
#+END_EXAMPLE

Translates to: interface 1 on node 145 has a bandwidth of 0.4a

* (B) ns3-sat-sim
- ns-3 based framework
- takes as input the state generated by ~satgenpy~ to perform packet-level simulations
- It makes use of the ~satellite ns-3~ module by Pedro Silva to calculate satellite locations over time.
- It uses the ~basic-sim ns-3~ module to make e.g.,
- Python modules (e.g., numpy, statsmodels, exputil) as well as other packages (e.g., OpenMPI, lcov, gnuplot).

* Running the simulation
- Hypatia makes use of two packages:
  - ~satellite~: Satellite movement calculation using SGP-4.
  - ~basic-sim~: Simulation framework to help running end-to-end simulations.

* Running on arch
#+BEGIN_EXAMPLE
libproj-dev -> proj
proj-data   -> proj
proj-bin    -> proj
libgeos-dev -> geos
#+END_EXAMPLE

#+BEGIN_EXAMPLE
openmpi-bin -> openmpi
openmpi-common -> openmpi
openmpi-doc -> openmpi
libopenmpi-dev -> openmpi
lcov -> lcov
gnuplot -> gnuplot
#+END_EXAMPLE

* Running on docker
1. Get the Dockerfile:
https://gist.github.com/gcgbarbosa/09fc90062ce90df40491a95555370dd3

2. After building the image:
#+BEGIN_EXAMPLE
sudo docker run -v /home/gcgbarbosa/repos/phd/hypatia/:/hypatia -td --name hp00 hypatia
sudo docker exec --workdir /hypatia/ns3-sat-sim/ -it hp bash build.sh
#+END_EXAMPLE

* From the paper
Run and analyze:
#+BEGIN_EXAMPLE
```
cd a_b || exit 1
python step_1_generate_runs.py || exit 1
python step_2_run.py || exit 1
python step_3_generate_plots.py || exit 1
```
#+END_EXAMPLE

* ground station id's

#+BEGIN_EXAMPLE
```
City name          GID           Kuiper id        Starlink id         Telesat id
Rio de Janeiro     18     1156 + 18 = 1174   1584 + 18 = 1602    351 + 18 = 369
St. Petersburg     73     1156 + 73 = 1229   1584 + 73 = 1657    351 + 73 = 424
Manila             17     1156 + 17 = 1173   1584 + 17 = 1601    351 + 17 = 368
Dalian             85     1156 + 85 = 1241   1584 + 85 = 1669    351 + 85 = 436
Istanbul           14     1156 + 14 = 1170   1584 + 14 = 1598    351 + 14 = 365
Nairobi            96     1156 + 96 = 1252   1584 + 96 = 1680    351 + 96 = 447
Paris              24     1156 + 24 = 1180   1584 + 24 = 1608    351 + 24 = 375
Moscow             21     1156 + 21 = 1177   1584 + 21 = 1605    351 + 21 = 372
```
#+END_EXAMPLE

- Explanation:

The Kuiper-610 shell has 34x34=1156 satellites.
Node identifiers start with the satellites,
as such the 100 ground stations will
have node identifiers 1156 (incl.) till 1256 (excl.).
This similarly applies to Starlink (22x72=1584)
and Telesat (27x13=351)

* step_1_generate_runs.py

** run_list.py
Core values:
#+BEGIN_EXAMPLE
{
    dynamic_state_update_interval_ms int,
    simulation_end_time_s: int,
    pingmesh_interval_ns: int,
    enable_isl_utilization_tracking: bool, # enable utilization tracking
    isl_utilization_tracking_interval_ns: int, #utilization interval
}
#+END_EXAMPLE
These values need to match the values generated on satgenpy


more values:
#+BEGIN_EXAMPLE
{
    full_satellite_network_isls
    full_satellite_network_gs_relay
    chosen_pairs: vector[
        (name, from, to, tcp_socket_type, satelite_network)
    ]
}
#+END_EXAMPLE

** confif files
For ping, hypatia will fill the following ns3 config file:
#+BEGIN_EXAMPLE
simulation_end_time_ns=[SIMULATION-END-TIME-NS]
simulation_seed=123456789

satellite_network_dir="../../../../satellite_networks_state/gen_data/[SATELLITE-NETWORK]"
satellite_network_routes_dir="../../../../satellite_networks_state/gen_data/[SATELLITE-NETWORK]/[DYNAMIC-STATE]"
dynamic_state_update_interval_ns=[DYNAMIC-STATE-UPDATE-INTERVAL-NS]

isl_data_rate_megabit_per_s=[ISL-DATA-RATE-MEGABIT-PER-S]
gsl_data_rate_megabit_per_s=[GSL-DATA-RATE-MEGABIT-PER-S]
isl_max_queue_size_pkts=[ISL-MAX-QUEUE-SIZE-PKTS]
gsl_max_queue_size_pkts=[GSL-MAX-QUEUE-SIZE-PKTS]

enable_isl_utilization_tracking=[ENABLE-ISL-UTILIZATION-TRACKING]
[ISL-UTILIZATION-TRACKING-INTERVAL-NS-COMPLETE]

tcp_socket_type=TcpNewReno

enable_pingmesh_scheduler=true
pingmesh_interval_ns=[PINGMESH-INTERVAL-NS]
pingmesh_endpoint_pairs=set([FROM]->[TO])
#+END_EXAMPLE

And the template_tcp_a_b_schedule.csv
#+BEGIN_EXAMPLE
0,[FROM],[TO],100000000000,0,,
#+END_EXAMPLE

* step_2_run.py
Running a ping command translates as:
#+BEGIN_EXAMPLE
"cd ../../../ns3-sat-sim/simulator; "

"./waf --run=\"main_satnet --run_dir='../../paper/ns3_experiments/a_b/runs/" + run["name"] + "'\" "

"2>&1 | tee '../../paper/ns3_experiments/a_b/" + logs_ns3_dir + "/console.txt'"
#+END_EXAMPLE

* step_3_generate_plots.py
#+BEGIN_EXAMPLE
"cd ../../../ns3-sat-sim/simulator/contrib/basic-sim/tools/plotting/plot_ping; "

"python plot_ping.py "
"../../../../../../../paper/ns3_experiments/a_b/runs/" + run["name"] + "/logs_ns3 "
"../../../../../../../paper/ns3_experiments/a_b/data/" + run["name"] + " "
"../../../../../../../paper/ns3_experiments/a_b/pdf/" + run["name"] + " "
"" + str(run["from_id"]) + " " + str(run["to_id"]) + " " + str(1 * 1000 * 1000 * 1000),  # from -> to
#+END_EXAMPLE

* simulator/scratch/main_satnet/main_satnet.cc
** running from paris to moscow
#+BEGIN_EXAMPLE
simulation_end_time_ns=200000000000
simulation_seed=123456789

satellite_network_dir="../../../../satellite_networks_state/gen_data/kuiper_630_isls_plus_grid_ground_stations_top_100_algorithm_free_one_only_over_isls"
satellite_network_routes_dir="../../../../satellite_networks_state/gen_data/kuiper_630_isls_plus_grid_ground_stations_top_100_algorithm_free_one_only_over_isls/dynamic_state_100ms_for_200s"
dynamic_state_update_interval_ns=100000000

isl_data_rate_megabit_per_s=10000.0
gsl_data_rate_megabit_per_s=10000.0
isl_max_queue_size_pkts=100000
gsl_max_queue_size_pkts=100000

enable_isl_utilization_tracking=true
isl_utilization_tracking_interval_ns=1000000000

tcp_socket_type=TcpNewReno

enable_pingmesh_scheduler=true
pingmesh_interval_ns=1000000
pingmesh_endpoint_pairs=set(1180->1177)
#+END_EXAMPLE

** console.txt
#+BEGIN_EXAMPLE
Waf: Entering directory `/hypatia/ns3-sat-sim/simulator/build/optimized'
Waf: Leaving directory `/hypatia/ns3-sat-sim/simulator/build/optimized'
Build commands will be stored in build/optimized/compile_commands.json
'build' finished successfully (0.954s)
BASIC SIMULATION START
  > Date... Monday August 7, 2022
  > Time... 23:24:01

CONFIGURE RUN DIRECTORY
  > Run directory: ../../paper/ns3_experiments/a_b/runs/kuiper_630_isls_1180_to_1177_pings
  > Logs directory: ../../paper/ns3_experiments/a_b/runs/kuiper_630_isls_1180_to_1177_pings/logs_ns3

CONFIGURATION
-----
KEY                                       VALUE
dynamic_state_update_interval_ns          100000000
enable_isl_utilization_tracking           true
enable_pingmesh_scheduler                 true
gsl_data_rate_megabit_per_s               10000.0
gsl_max_queue_size_pkts                   100000
isl_data_rate_megabit_per_s               10000.0
isl_max_queue_size_pkts                   100000
isl_utilization_tracking_interval_ns      1000000000
pingmesh_endpoint_pairs                   set(1180->1177)
pingmesh_interval_ns                      1000000
satellite_network_dir                     ../../../../satellite_networks_state/gen_data/kuiper_630_isls_plus_grid_ground_stations_top_100_algorithm_free_one_only_over_isls
satellite_network_routes_dir              ../../../../satellite_networks_state/gen_data/kuiper_630_isls_plus_grid_ground_stations_top_100_algorithm_free_one_only_over_isls/dynamic_state_100ms_for_200s
simulation_end_time_ns                    200000000000
simulation_seed                           123456789
tcp_socket_type                           TcpNewReno

CONFIGURE SIMULATION
  > Distributed is not enabled
  > System id........ 0
  > No. of systems... 1
  > Seed............. 123456789
  > Duration......... 200.00 s (200000000000 ns)

TCP OPTIMIZATION BASIC
  > Clock granularity.......... 1 ns
  > Initial CWND............... 10 packets
  > Send buffer size........... 33.554 MB
  > Receive buffer size........ 33.554 MB
  > Segment size............... 1380 byte
  > Timestamp option........... enabled
  > SACK option................ enabled
  > Window scaling option...... enabled
  > Pacing..................... disabled

SATELLITE NETWORK
  > Number of satellites........ 1156
  > Number of ground stations... 100
  > Number of nodes............. 1256
  > Installed Internet stacks
  > Reading and creating ISLs
    >> ISL data rate........ 10000 Mbit/s
    >> ISL max queue size... 100000 packets
  > Creating GSLs
    >> GSL data rate........ 10000 Mbit/s
    >> GSL max queue size... 100000 packets
  > Populating ARP caches

SETUP SINGLE FORWARDING ROUTING
  > Create initial single forwarding state
  > Setting the routing arbiter on each node
  > Forward state update interval: 100000000ns
  > Perform first forwarding state load for t=0

SETUP GSL IF BANDWIDTH HELPER
  > GSL interface bandwidth update interval: 100000000ns
  > Perform first GSL interface bandwidth setting for t=0

TCP FLOW SCHEDULER
  > Not enabled explicitly, so disabled

UDP BURST SCHEDULER
  > Not enabled explicitly, so disabled

PINGMESH SCHEDULER
  > Pingmesh scheduler is enabled
  > Determined pingmesh pairs (size: 1)
  > Removed previous pingmesh log files if present
  > Ping interval: 1000000 ns
  > Setting up 100 pingmesh servers
  > Setting up 1 pingmesh clients

SIMULATION
Running the simulation for 200.00 simulation seconds...
63.27% - Simulation Time = 126.54 s ::: Wallclock Time = 10.61 s
Estimated wallclock time remaining: 6 seconds
Finished simulation.
Simulation of 200.0 seconds took in wallclock time 17.8 seconds.

STORE TCP FLOW RESULTS
  > Not enabled, so no TCP flow results are written

STORE UDP BURST RESULTS
  > Not enabled, so no UDP burst results are written

STORE PINGMESH RESULTS
  > Opening pingmesh log files:
    >> Opened: ../../paper/ns3_experiments/a_b/runs/kuiper_630_isls_1180_to_1177_pings/logs_ns3/pingmesh.csv
    >> Opened: ../../paper/ns3_experiments/a_b/runs/kuiper_630_isls_1180_to_1177_pings/logs_ns3/pingmesh.txt
  > Writing pingmesh.txt header
  > Closing pingmesh log files:
    >> Closed: ../../paper/ns3_experiments/a_b/runs/kuiper_630_isls_1180_to_1177_pings/logs_ns3/pingmesh.csv
    >> Closed: ../../paper/ns3_experiments/a_b/runs/kuiper_630_isls_1180_to_1177_pings/logs_ns3/pingmesh.txt
  > Pingmesh log files have been written

CLEAN-UP
  > Simulator is destroyed

TIMING RESULTS
------
[    0.0 -     0.0] (0.0 s) :: Configure run and logs directory
[    0.0 -     0.0] (0.0 s) :: Configure simulator
[    0.0 -     0.0] (0.0 s) :: Setup TCP parameters
[    0.0 -     1.2] (1.2 s) :: Create initial single forwarding state
[    1.2 -     4.3] (3.1 s) :: Setup routing arbiter on each node
[    4.3 -     4.4] (0.1 s) :: Create initial single forwarding state
[    4.4 -     4.4] (0.0 s) :: Set first GSL interface bandwidth
[    4.4 -     4.4] (0.0 s) :: Determined pingmesh pairs
[    4.4 -     4.4] (0.0 s) :: Remove previous pingmesh log files
[    4.4 -     4.4] (0.0 s) :: Setup pingmesh servers
[    4.4 -     4.4] (0.0 s) :: Setup pingmesh clients
[    4.4 -     4.4] (0.0 s) :: Whatever is between previous timestamp and the simulation run
[    4.4 -    22.3] (17.8 s) :: Run simulation
[   22.3 -    22.4] (0.1 s) :: Write pingmesh log files
[   22.4 -    22.5] (0.0 s) :: Destroy simulator

BASIC SIMULATION END
  > Date... Monday August 7, 2022
  > Time... 23:24:24
#+END_EXAMPLE

** pingmesh.txt
#+BEGIN_EXAMPLE
Source    Target    Mean latency there    Mean latency back     Min. RTT        Mean RTT        Max. RTT        Smp.std. RTT    Reply arrival
1180      1177      11.19 ms              11.19 ms              21.72 ms        22.39 ms        25.20 ms        0.83 ms         199979/200000 (100%)
#+END_EXAMPLE


* (C) satviz
Cesium visualization pipeline to generate interactive satellite network visualizations.
Uses Cesium API + python scripts.


** Cesium

#+ATTR_HTML: :width 100% :height 50%
[[./img/cesium1.png]]


** Cesium

#+ATTR_HTML: :width 100% :height 50%
[[./img/cesium2.png]]

** Cesium

#+ATTR_HTML: :width 100% :height 50%
[[./img/cesiun3.png]]


** Cesium

#+ATTR_HTML: :width 100% :height 50%
[[./img/cesium4.png]]


* (D) paper
 Experimental and plotting code to reproduce the experiments and figures which are presented in the paper.
 It makes use of several Python modules among which: satgenpy, numpy, networkload, and exputil.
 It uses the gnuplot package for most of its plotting.

** RTT Fluctuations

#+ATTR_HTML: :width 100% :height 50%
[[./img/rtt-fluctuations.png]]

** CWND Evolution

#+ATTR_HTML: :width 100% :height 50%
[[./img/cwnd-evolution.png]]

** Impact over loss and delay CC

#+ATTR_HTML: :width 100% :height 50%
[[./img/loss-delay-suffer.png]]


* Questions?

Thank you!
